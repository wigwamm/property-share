# require 'spec_helper'

# # This spec was generated by rspec-rails when you ran the scaffold generator.
# # It demonstrates how one might use RSpec to specify the controller code that
# # was generated by Rails when you ran the scaffold generator.
# #
# # It assumes that the implementation code is generated by the rails scaffold
# # generator.  If you are using any extension libraries to generate different
# # controller code, this generated spec may or may not pass.
# #
# # It only uses APIs available in rails and/or rspec-rails.  There are a number
# # of tools you can use to make these specs even more expressive, but we're
# # sticking to rails and rspec-rails APIs to keep things simple and stable.
# #
# # Compared to earlier versions of this generator, there is very limited use of
# # stubs and message expectations in this spec.  Stubs are only used when there
# # is no simpler way to get a handle on the object needed for the example.
# # Message expectations are only used when there is no simpler way to specify
# # that an instance is receiving a specific message.

# describe VisitorsController do

#   # This should return the minimal set of attributes required to create a valid
#   # Visitor. As you add validations to Visitor, be sure to
#   # adjust the attributes here as well.

#   let(:valid_attributes) { { "mobile" => "077777777777" } }

#   # This should return the minimal set of values that should be in the session
#   # in order to pass any filters (e.g. authentication) defined in
#   # VisitorsController. Be sure to keep this updated too.
#   let(:valid_session) { {} }

#   describe "POST create" do

#     describe "with valid params" do
#       it "creates a new Visitor" do
#         expect {
#           post :create, {:visitor => valid_attributes}, valid_session
#         }.to change(Visitor, :count).by(1)
#       end

#       it "assigns a newly created visitor as @visitor" do
#         post :create, {:visitor => valid_attributes}, valid_session
#         assigns(:visitor).should be_a(Visitor)
#         assigns(:visitor).should be_persisted
#       end

#       it "redirects to root" do
#         post :create, {:visitor => valid_attributes}, valid_session
#         response.should redirect_to(root_path)
#       end
#     end

#     describe "with invalid params" do

#       # it "assigns a newly created but unsaved visitor as @visitor" do
#       #   # Trigger the behavior that occurs when invalid params are submitted
#       #   Visitor.any_instance.stub(:save).and_return(false)
#       #   post :create, {:visitor => { "mobile" => "invalid value" }}, valid_session
#       #   assigns(:visitor).should be_a_new(Visitor)
#       # end

#       it "redirects to root" do
#         post :create, {:visitor => valid_attributes}, valid_session
#         response.should redirect_to(root_path)
#       end

#     end
#   end

#   describe "DELETE destroy" do
#     it "does not destroys the requested visitor" do
#       visitor = Visitor.create! valid_attributes
#       expect {
#         delete :destroy, {:id => visitor.to_param}, valid_session
#       }.to change(Visitor, :count).by(-1)
#     end

#     it "redirects to the visitors list" do
#       visitor = Visitor.create! valid_attributes
#       delete :destroy, {:id => visitor.to_param}, valid_session
#       response.should redirect_to(visitors_url)
#     end
#   end

# end
